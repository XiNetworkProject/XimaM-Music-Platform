import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import User from '@/models/User';

export async function POST(request: NextRequest) {
  try {
    await dbConnect();

    const { email } = await request.json();

    // Validation de l'email
    if (!email || !/\S+@\S+\.\S+/.test(email.trim())) {
      return NextResponse.json(
        { error: 'Format d\'email invalide' },
        { status: 400 }
      );
    }

    // V√©rifier si l'utilisateur existe
    const user = await User.findOne({ email: email.trim().toLowerCase() });
    
    // Pour des raisons de s√©curit√©, on ne r√©v√®le pas si l'email existe ou non
    // On renvoie toujours un succ√®s m√™me si l'utilisateur n'existe pas
    
    if (user) {
      console.log('üìß Demande de r√©cup√©ration de mot de passe pour:', email);
      
      // TODO: Impl√©menter l'envoi d'email avec un service comme SendGrid, Resend, etc.
      // Pour l'instant, on simule juste l'envoi
      
      // Exemple de ce qui pourrait √™tre fait :
      // 1. G√©n√©rer un token de r√©initialisation
      // 2. Sauvegarder le token en base avec une expiration
      // 3. Envoyer un email avec le lien de r√©initialisation
      
      console.log('‚úÖ Email de r√©cup√©ration "envoy√©" pour:', email);
    } else {
      console.log('üìß Demande de r√©cup√©ration pour un email inexistant:', email);
    }

    // Toujours renvoyer un succ√®s pour des raisons de s√©curit√©
    return NextResponse.json(
      { 
        message: 'Si un compte existe avec cet email, vous recevrez un lien de r√©initialisation'
      },
      { status: 200 }
    );

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de mot de passe:', error);
    
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
} 