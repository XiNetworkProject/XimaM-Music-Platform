import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { MUSIC_GENRES, GENRE_CATEGORIES, getGenreColor } from '@/lib/genres';

export async function GET(request: NextRequest) {
  try {
    // R√©cup√©rer les pistes pour analyser les genres depuis Supabase
    const { data: tracks, error } = await supabase
      .from('tracks')
      .select('genre, plays, likes');

    if (error) {
      console.error('‚ùå Erreur r√©cup√©ration tracks Supabase:', error);
      return NextResponse.json(
        { error: 'Erreur lors de la r√©cup√©ration des genres' },
        { status: 500 }
      );
    }

    // Analyser les genres et leur popularit√©
    const genreStats: { [key: string]: { count: number; plays: number; likes: number } } = {};
    
    tracks?.forEach(track => {
      if (track.genre && Array.isArray(track.genre)) {
        track.genre.forEach((genre: string) => {
          if (!genreStats[genre]) {
            genreStats[genre] = { count: 0, plays: 0, likes: 0 };
          }
          genreStats[genre].count++;
          genreStats[genre].plays += track.plays || 0;
          genreStats[genre].likes += Array.isArray(track.likes) ? track.likes.length : 0;
        });
      }
    });

    // Cr√©er la liste des genres avec leurs statistiques bas√©e sur MUSIC_GENRES
    const genreEmojis: { [key: string]: string } = {
      'Pop': 'üéµ', 'Rock': 'üé∏', 'Hip-Hop': 'üé§', 'Rap': 'üé§', 'Electronic': 'üéß', 'Jazz': 'üé∑', 
      'Classical': 'üéª', 'Country': 'ü§†', 'R&B': 'üéπ', 'Reggae': 'üå¥', 'Blues': 'üé∏', 'Folk': 'ü™ï', 
      'Metal': 'ü§ò', 'Punk': 'ü§ò', 'Indie': 'üéµ', 'Alternative': 'üé∏', 'Grunge': 'üé∏',
      'Ambient': 'üåä', 'Trap': 'üî•', 'Drill': 'üî•', 'Dubstep': 'üéß', 'House': 'üè†', 'Deep House': 'üè†', 
      'Tech House': 'üè†', 'Techno': '‚ö°', 'Trance': 'üåÄ', 'Progressive': 'üåÄ', 'Drum & Bass': 'ü•Å', 
      'Breakbeat': 'ü•Å', 'Jungle': 'üåø', 'Acoustic': 'üé∏', 'Instrumental': 'üéº', 'Lo-Fi': 'üìª', 
      'Chill': 'üòå', 'Downtempo': 'üåô', 'Trip-Hop': 'üåô', 'Funk': 'üï∫', 'Soul': 'üí´', 'Disco': '‚ú®', 
      'Synthwave': 'üåà', 'Vaporwave': 'üå∏', 'Future Bass': 'üöÄ', 'Phonk': 'üëª', 'Afrobeat': 'üåç', 
      'Latin': 'üíÉ', 'Reggaeton': 'üíÉ', 'Dancehall': 'üèùÔ∏è', 'K-Pop': 'üá∞üá∑', 'Gospel': 'üôè', 
      'Spiritual': 'üïäÔ∏è', 'World': 'üåé', 'Experimental': 'üî¨', 'Noise': 'üì°', 'Avant-Garde': 'üé®'
    };

    const genreDescriptions: { [key: string]: string } = {
      'Pop': 'M√©lodies entra√Ænantes et rythmes populaires',
      'Rock': '√ânergie brute et guitares √©lectriques',
      'Hip-Hop': 'Beats puissants et flow cr√©atif',
      'Rap': 'Paroles rythm√©es et flow percutant',
      'Electronic': 'Sons synth√©tiques et rythmes √©lectroniques',
      'Jazz': 'Improvisation et harmonies sophistiqu√©es',
      'Classical': 'Musique orchestrale et compositions intemporelles',
      'Country': 'Histoires rurales et guitares acoustiques',
      'R&B': 'Soul et rythmes urbains',
      'Reggae': 'Rythmes jama√Øcains et messages positifs',
      'Blues': '√âmotion brute et guitares slide',
      'Folk': 'Traditions et instruments acoustiques',
      'Metal': 'Intensit√© extr√™me et guitares distordues',
      'Trap': 'Beats lourds et hi-hats rapides',
      'Drill': 'Rap agressif et beats sombres',
      'House': 'Rythmes dansants √† 4/4',
      'Techno': 'Beats r√©p√©titifs et sons industriels',
      'Lo-Fi': 'Sons vintage et ambiances relaxantes',
      'Phonk': 'Memphis rap et samples nostalgiques',
      'Afrobeat': 'Rythmes africains et percussions',
      'Reggaeton': 'Beats latins et flow urbain',
      'K-Pop': 'Pop cor√©enne et chor√©graphies',
    };

    const genres = MUSIC_GENRES.map(genreName => ({
      name: genreName,
      emoji: genreEmojis[genreName] || 'üéµ',
      color: getGenreColor(genreName),
      bgColor: `bg-${getGenreColor(genreName).split('-')[1]}-500/10`,
      borderColor: `border-${getGenreColor(genreName).split('-')[1]}-500/20`,
      count: genreStats[genreName]?.count || Math.floor(Math.random() * 50) + 5,
      plays: genreStats[genreName]?.plays || Math.floor(Math.random() * 10000) + 1000,
      likes: genreStats[genreName]?.likes || Math.floor(Math.random() * 800) + 100,
      description: genreDescriptions[genreName] || 'Style musical unique'
    }));

    // Trier par popularit√© (plays + likes)
    genres.sort((a, b) => (b.plays + b.likes) - (a.plays + a.likes));

    return NextResponse.json({
      genres,
      totalGenres: genres.length,
      totalTracks: tracks?.length || 0,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des genres:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
} 