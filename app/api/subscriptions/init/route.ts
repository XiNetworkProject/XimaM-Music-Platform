import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import Subscription from '@/models/Subscription';

export async function POST(request: NextRequest) {
  try {
    await dbConnect();
    
    console.log('üîß Initialisation des abonnements sur Vercel...');
    
    // Supprimer les abonnements existants
    await Subscription.deleteMany({});
    console.log('‚úÖ Abonnements existants supprim√©s');
    
    // Cr√©er les abonnements par d√©faut
    const subscriptions = [
      {
        name: 'free',
        price: 0,
        currency: 'EUR',
        interval: 'month',
        limits: {
          uploads: 3,
          comments: 10,
          plays: 50,
          playlists: 2,
          quality: '128kbps',
          ads: true,
          analytics: 'none',
          collaborations: false,
          apiAccess: false,
          support: 'community'
        },
        features: [
          '3 uploads par mois',
          '10 commentaires par mois',
          '50 √©coutes par mois',
          '2 playlists max',
          'Qualit√© audio 128kbps',
          'Publicit√©s incluses',
          'Support communautaire'
        ],
        isActive: true
      },
      {
        name: 'starter',
        price: 4.99,
        currency: 'EUR',
        interval: 'month',
        limits: {
          uploads: 15,
          comments: 200,
          plays: 500,
          playlists: 10,
          quality: '256kbps',
          ads: false,
          analytics: 'basic',
          collaborations: false,
          apiAccess: false,
          support: 'email'
        },
        features: [
          '15 uploads par mois',
          '200 commentaires par mois',
          '500 √©coutes par mois',
          '10 playlists max',
          'Qualit√© audio 256kbps',
          'Sans publicit√©s',
          'Analytics basiques',
          'Support par email'
        ],
        isActive: true
      },
      {
        name: 'creator',
        price: 12.99,
        currency: 'EUR',
        interval: 'month',
        limits: {
          uploads: 50,
          comments: 1000,
          plays: 2000,
          playlists: -1, // Illimit√©
          quality: '320kbps',
          ads: false,
          analytics: 'advanced',
          collaborations: true,
          apiAccess: false,
          support: 'priority'
        },
        features: [
          '50 uploads par mois',
          '1000 commentaires par mois',
          '2000 √©coutes par mois',
          'Playlists illimit√©es',
          'Qualit√© audio 320kbps',
          'Sans publicit√©s',
          'Analytics avanc√©s',
          'Collaborations',
          'Support prioritaire'
        ],
        isActive: true
      },
      {
        name: 'pro',
        price: 19.99,
        currency: 'EUR',
        interval: 'month',
        limits: {
          uploads: 150,
          comments: -1, // Illimit√©
          plays: 5000,
          playlists: -1, // Illimit√©
          quality: 'lossless',
          ads: false,
          analytics: 'complete',
          collaborations: true,
          apiAccess: false,
          support: 'dedicated'
        },
        features: [
          '150 uploads par mois',
          'Commentaires illimit√©s',
          '5000 √©coutes par mois',
          'Playlists illimit√©es',
          'Qualit√© audio Lossless',
          'Sans publicit√©s',
          'Analytics complets',
          'Collaborations avanc√©es',
          'Support d√©di√©'
        ],
        isActive: true
      },
      {
        name: 'enterprise',
        price: 29.99,
        currency: 'EUR',
        interval: 'month',
        limits: {
          uploads: -1, // Illimit√©
          comments: -1, // Illimit√©
          plays: -1, // Illimit√©
          playlists: -1, // Illimit√©
          quality: 'master',
          ads: false,
          analytics: 'complete',
          collaborations: true,
          apiAccess: true,
          support: 'dedicated'
        },
        features: [
          'Uploads illimit√©s',
          'Commentaires illimit√©s',
          '√âcoutes illimit√©es',
          'Playlists illimit√©es',
          'Qualit√© audio Master',
          'Sans publicit√©s',
          'Analytics complets',
          'Collaborations avanc√©es',
          'Acc√®s API',
          'Support d√©di√© 24/7'
        ],
        isActive: true
      }
    ];

    console.log('üìù Cr√©ation des abonnements...');
    const createdSubscriptions = [];
    
    for (const subData of subscriptions) {
      const subscription = new Subscription(subData);
      await subscription.save();
      createdSubscriptions.push(subscription);
      console.log(`‚úÖ Abonnement ${subData.name} cr√©√©`);
    }

    console.log('üéâ Initialisation termin√©e !');
    
    // V√©rifier que les abonnements sont bien sauvegard√©s
    const savedSubscriptions = await Subscription.find({ isActive: true });
    console.log('üîç V√©rification - Abonnements sauvegard√©s:', savedSubscriptions.map(s => ({ name: s.name, isActive: s.isActive })));
    
    return NextResponse.json({
      success: true,
      message: 'Abonnements initialis√©s avec succ√®s',
      count: createdSubscriptions.length,
      subscriptions: createdSubscriptions.map(sub => ({
        name: sub.name,
        price: sub.price,
        features: sub.features.length,
        isActive: sub.isActive
      })),
      savedCount: savedSubscriptions.length
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    return NextResponse.json(
      { 
        error: 'Erreur lors de l\'initialisation des abonnements',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
} 