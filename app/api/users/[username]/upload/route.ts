import { NextRequest, NextResponse } from 'next/server';
import dbConnect, { isConnected } from '@/lib/db';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/authOptions';
import User from '@/models/User';
import { uploadImage } from '@/lib/cloudinary';

export async function POST(
  request: NextRequest,
  { params }: { params: { username: string } }
) {
  console.log('=== DEBUT UPLOAD API ===');
  console.log('Username:', params.username);
  
  try {
    // V√©rifier les variables d'environnement Cloudinary
    if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
      console.error('Variables d\'environnement Cloudinary manquantes');
      return NextResponse.json(
        { error: 'Configuration Cloudinary manquante' },
        { status: 500 }
      );
    }
    console.log('‚úÖ Variables Cloudinary OK');

    const session = await getServerSession(authOptions);
    console.log('Session:', session ? '‚úÖ Pr√©sente' : '‚ùå Absente');
    console.log('User email:', session?.user?.email);
    
    if (!session?.user?.email) {
      console.log('‚ùå Pas de session utilisateur');
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    console.log('üîÑ Connexion √† la base de donn√©es...');
    await dbConnect();
    
    if (!isConnected()) {
      console.error('‚ùå Impossible de se connecter √† la base de donn√©es');
      return NextResponse.json(
        { error: 'Erreur de connexion √† la base de donn√©es' },
        { status: 500 }
      );
    }
    console.log('‚úÖ Base de donn√©es connect√©e');
    
    const { username } = params;
    
    // V√©rifier que l'utilisateur modifie son propre profil
    console.log('üîç Recherche utilisateur:', session.user.email);
    const currentUser = await User.findOne({ email: session.user.email });
    console.log('Utilisateur trouv√©:', currentUser ? '‚úÖ' : '‚ùå');
    console.log('Username actuel:', currentUser?.username);
    console.log('Username demand√©:', username);
    
    if (!currentUser || currentUser.username !== username) {
      console.log('‚ùå Non autoris√© √† modifier ce profil');
      return NextResponse.json(
        { error: 'Non autoris√© √† modifier ce profil' },
        { status: 403 }
      );
    }
    console.log('‚úÖ Autorisation OK');
    
    console.log('üìÅ Lecture FormData...');
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const type = formData.get('type') as 'avatar' | 'banner';
    
    console.log('Type de fichier:', file?.type);
    console.log('Taille du fichier:', file?.size);
    console.log('Type d\'upload:', type);
    
    if (!file) {
      console.log('‚ùå Aucun fichier fourni');
      return NextResponse.json(
        { error: 'Aucun fichier fourni' },
        { status: 400 }
      );
    }
    
    if (!type || !['avatar', 'banner'].includes(type)) {
      console.log('‚ùå Type d\'image invalide:', type);
      return NextResponse.json(
        { error: 'Type d\'image invalide' },
        { status: 400 }
      );
    }
    
    // V√©rifier le type de fichier
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Fichier non-image:', file.type);
      return NextResponse.json(
        { error: 'Le fichier doit √™tre une image' },
        { status: 400 }
      );
    }
    
    // V√©rifier la taille (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      console.log('‚ùå Fichier trop volumineux:', file.size);
      return NextResponse.json(
        { error: 'Le fichier ne peut pas d√©passer 5MB' },
        { status: 400 }
      );
    }
    
    // Convertir le fichier en buffer
    console.log('üîÑ Conversion en buffer...');
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    
    console.log(`üì§ Upload ${type} pour ${username}, taille: ${buffer.length} bytes`);
    
    // Upload vers Cloudinary
    const folder = type === 'avatar' ? 'ximam/avatars' : 'ximam/banners';
    console.log('üìÅ Dossier Cloudinary:', folder);
    
    // Upload simplifi√© sans options probl√©matiques
    const uploadResult = await uploadImage(buffer, {
      folder
      // Retir√© temporairement: width, height, crop, gravity, quality
    });
    
    if (!uploadResult.secure_url) {
      console.error('‚ùå Upload Cloudinary √©chou√©:', uploadResult);
      return NextResponse.json(
        { error: 'Erreur lors de l\'upload de l\'image' },
        { status: 500 }
      );
    }
    
    console.log(`‚úÖ Upload r√©ussi: ${uploadResult.secure_url}`);
    
    // Mettre √† jour l'utilisateur avec la nouvelle image
    console.log('üîÑ Mise √† jour utilisateur...');
    const updateData: any = {};
    updateData[type] = uploadResult.secure_url;
    
    const updatedUser = await User.findByIdAndUpdate(
      currentUser._id,
      updateData,
      { new: true }
    )
      .populate('followers', 'name username avatar isVerified')
      .populate('following', 'name username avatar isVerified')
      .populate('tracks', 'title coverUrl duration plays likes createdAt')
      .populate('playlists', 'name description coverUrl trackCount likes isPublic createdAt')
      .populate('likes', 'title artist coverUrl duration plays')
      .lean() as any;
    
    if (!updatedUser) {
      console.error('‚ùå √âchec de la mise √† jour de l\'utilisateur');
      return NextResponse.json(
        { error: 'Erreur lors de la mise √† jour du profil' },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ Utilisateur mis √† jour');
    
    // Calculer les statistiques
    const totalPlays = (updatedUser.tracks || []).reduce((sum: number, track: any) => sum + (track.plays || 0), 0);
    const totalLikes = (updatedUser.tracks || []).reduce((sum: number, track: any) => sum + (track.likes?.length || 0), 0);
    
    // Formater la r√©ponse
    const formattedUser = {
      ...updatedUser,
      _id: updatedUser._id.toString(),
      trackCount: (updatedUser.tracks || []).length,
      playlistCount: (updatedUser.playlists || []).length,
      followerCount: (updatedUser.followers || []).length,
      followingCount: (updatedUser.following || []).length,
      likeCount: (updatedUser.likes || []).length,
      totalPlays,
      totalLikes,
      followers: (updatedUser.followers || []).map((follower: any) => ({
        ...follower,
        _id: follower._id.toString()
      })),
      following: (updatedUser.following || []).map((following: any) => ({
        ...following,
        _id: following._id.toString()
      })),
      tracks: (updatedUser.tracks || []).map((track: any) => ({
        ...track,
        _id: track._id.toString(),
        artist: track.artist ? {
          ...track.artist,
          _id: track.artist._id.toString()
        } : null
      })),
      playlists: (updatedUser.playlists || []).map((playlist: any) => ({
        ...playlist,
        _id: playlist._id.toString(),
        createdBy: playlist.createdBy ? {
          ...playlist.createdBy,
          _id: playlist.createdBy._id.toString()
        } : null
      })),
      likes: (updatedUser.likes || []).map((track: any) => ({
        ...track,
        _id: track._id.toString(),
        artist: track.artist ? {
          ...track.artist,
          _id: track.artist._id.toString()
        } : null
      }))
    };
    
    console.log('‚úÖ R√©ponse envoy√©e avec succ√®s');
    console.log('=== FIN UPLOAD API ===');
    
    return NextResponse.json({
      user: formattedUser,
      imageUrl: uploadResult.secure_url,
      message: `${type === 'avatar' ? 'Avatar' : 'Banni√®re'} mis √† jour avec succ√®s`
    });
  } catch (error) {
    console.error('‚ùå Erreur upload image:', error);
    console.log('=== FIN UPLOAD API AVEC ERREUR ===');
    return NextResponse.json(
      { error: 'Erreur lors de l\'upload de l\'image' },
      { status: 500 }
    );
  }
} 