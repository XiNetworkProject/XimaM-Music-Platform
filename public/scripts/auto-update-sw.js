console.log('üîÑ Script de mise √† jour automatique du Service Worker...');

// Configuration
const SW_UPDATE_INTERVAL = 5 * 60 * 1000; // 5 minutes
const SW_CHECK_INTERVAL = 30 * 1000; // 30 secondes

// Fonction pour v√©rifier et forcer la mise √† jour du service worker
async function checkAndUpdateServiceWorker() {
  try {
    if (!('serviceWorker' in navigator)) {
      console.log('‚ùå Service Worker non support√©');
      return;
    }

    const registration = await navigator.serviceWorker.getRegistration();
    
    if (!registration) {
      console.log('üìù Aucun Service Worker enregistr√©, enregistrement...');
      await navigator.serviceWorker.register('/sw.js');
      return;
    }

    // V√©rifier s'il y a une mise √† jour en attente
    if (registration.waiting) {
      console.log('üîÑ Mise √† jour en attente d√©tect√©e, activation...');
      
      // Envoyer le message pour skip waiting
      registration.waiting.postMessage({ type: 'SKIP_WAITING' });
      
      // Attendre l'activation
      await new Promise(resolve => {
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'activated') {
                console.log('‚úÖ Nouveau Service Worker activ√©');
                resolve();
              }
            });
          }
        });
      });
      
      // D√©sactiv√© : reload automatique supprim√©
      // setTimeout(() => {
      //   console.log('üîÑ Rechargement de la page pour appliquer les mises √† jour...');
      //   window.location.reload();
      // }, 1000);
      
      return;
    }

    // Forcer la v√©rification de mise √† jour
    console.log('üîç V√©rification des mises √† jour...');
    await registration.update();
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du Service Worker:', error);
  }
}

// Fonction pour nettoyer le cache automatiquement
async function autoCleanCache() {
  try {
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      const oldCaches = cacheNames.filter(name => 
        name.startsWith('ximam-') && 
        !name.includes('v3') // Garder la version actuelle
      );
      
      if (oldCaches.length > 0) {
        console.log('üßπ Nettoyage automatique des anciens caches...');
        await Promise.all(oldCaches.map(name => caches.delete(name)));
        console.log(`‚úÖ ${oldCaches.length} anciens caches supprim√©s`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage automatique du cache:', error);
  }
}

// Fonction pour am√©liorer la navigation audio
function enhanceAudioNavigation() {
  // Exposer des fonctions globales pour la navigation audio
  window.audioNavigation = {
    // Fonction pour forcer la navigation vers la piste suivante
    forceNext: () => {
      if (window.audioService?.actions?.nextTrack) {
        console.log('üéµ Navigation forc√©e vers la piste suivante...');
        window.audioService.actions.nextTrack();
        return true;
      }
      console.log('‚ùå Service audio non disponible');
      return false;
    },
    
    // Fonction pour forcer la navigation vers la piste pr√©c√©dente
    forcePrevious: () => {
      if (window.audioService?.actions?.previousTrack) {
        console.log('üéµ Navigation forc√©e vers la piste pr√©c√©dente...');
        window.audioService.actions.previousTrack();
        return true;
      }
      console.log('‚ùå Service audio non disponible');
      return false;
    },
    
    // Fonction pour charger toutes les pistes
    loadAllTracks: async () => {
      if (window.audioService?.actions?.loadAllTracks) {
        console.log('üìö Chargement forc√© de toutes les pistes...');
        await window.audioService.actions.loadAllTracks();
        return true;
      }
      console.log('‚ùå Service audio non disponible');
      return false;
    },
    
    // Fonction pour obtenir l'√©tat du service audio
    getStatus: () => {
      if (window.audioService) {
        return {
          tracksLoaded: window.audioService.allTracks?.length || 0,
          currentTrack: window.audioService.state?.currentTrack?.title || 'Aucune',
          isPlaying: window.audioService.state?.isPlaying || false,
          queueLength: window.audioService.queue?.length || 0
        };
      }
      return null;
    }
  };
  
  console.log('üéµ Navigation audio am√©lior√©e disponible via window.audioNavigation');
}

// Fonction pour initialiser la surveillance automatique
function initAutoUpdate() {
  console.log('üöÄ Initialisation de la surveillance automatique...');
  
  // V√©rification initiale
  checkAndUpdateServiceWorker();
  autoCleanCache();
  enhanceAudioNavigation();
  
  // Surveillance p√©riodique
  setInterval(checkAndUpdateServiceWorker, SW_CHECK_INTERVAL);
  setInterval(autoCleanCache, SW_UPDATE_INTERVAL);
  
  // √âcouter les √©v√©nements de mise √† jour
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.addEventListener('controllerchange', () => {
      // D√©sactiv√© : reload automatique supprim√©
      // console.log('üîÑ Contr√¥leur Service Worker chang√©, rechargement...');
      // window.location.reload();
    });
  }
  
  console.log('‚úÖ Surveillance automatique initialis√©e');
}

// Fonction pour forcer une mise √† jour imm√©diate
async function forceImmediateUpdate() {
  console.log('‚ö° Mise √† jour imm√©diate forc√©e...');
  
  try {
    // Nettoyer le cache
    await autoCleanCache();
    
    // V√©rifier et mettre √† jour le service worker
    await checkAndUpdateServiceWorker();
    
    // Am√©liorer la navigation audio
    enhanceAudioNavigation();
    
    console.log('‚úÖ Mise √† jour imm√©diate termin√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour imm√©diate:', error);
  }
}

// Exposer les fonctions globalement
window.autoUpdateSW = {
  checkAndUpdateServiceWorker,
  autoCleanCache,
  enhanceAudioNavigation,
  forceImmediateUpdate,
  initAutoUpdate
};

// D√©marrer automatiquement
initAutoUpdate();

console.log('‚úÖ Script de mise √† jour automatique charg√©');
console.log('üìù Utilisez window.autoUpdateSW.forceImmediateUpdate() pour forcer une mise √† jour');
console.log('üéµ Utilisez window.audioNavigation pour la navigation audio am√©lior√©e'); 