const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function createAIGenerationsTable() {
  console.log('üöÄ V√©rification de la table ai_generations...\n');

  try {
    // 1. V√©rifier si la table existe
    console.log('üîç V√©rification de la table...');
    const { error: checkError } = await supabase
      .from('ai_generations')
      .select('id')
      .limit(1);

    if (checkError && checkError.code === 'PGRST205') {
      console.log('‚ùå Table ai_generations n\'existe pas, cr√©ation manuelle requise');
      console.log('\nüìã Instructions :');
      console.log('1. Allez sur https://supabase.com');
      console.log('2. Ouvrez votre projet');
      console.log('3. Allez dans "SQL Editor"');
      console.log('4. Ex√©cutez ce code :');
      console.log(`
CREATE TABLE IF NOT EXISTS public.ai_generations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    audio_url TEXT NOT NULL,
    prompt TEXT NOT NULL,
    duration INTEGER NOT NULL DEFAULT 30,
    model VARCHAR(50) NOT NULL DEFAULT 'audiocraft',
    style VARCHAR(50),
    quality VARCHAR(20) DEFAULT '256kbps',
    status VARCHAR(20) DEFAULT 'pending',
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_ai_generations_user_id ON ai_generations(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_generations_created_at ON ai_generations(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_ai_generations_status ON ai_generations(status);

ALTER TABLE ai_generations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own ai generations" ON ai_generations
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create own ai generations" ON ai_generations
    FOR INSERT WITH CHECK (auth.uid() = user_id);
      `);
      return;
    }

    // 2. V√©rifier que la table existe
    console.log('üîç V√©rification des donn√©es...');
    const { data: generations, error: generationsError } = await supabase
      .from('ai_generations')
      .select('id, user_id, prompt, created_at')
      .limit(5);

    if (generationsError) {
      console.error('‚ùå Erreur:', generationsError);
      return;
    }

    console.log(`‚úÖ Table ai_generations existe !`);
    console.log(`üìä ${generations.length} g√©n√©rations trouv√©es:`);
    generations.forEach(gen => {
      console.log(`   - ${gen.prompt.substring(0, 30)}... (${gen.created_at})`);
    });

    // 3. Test de l'endpoint de g√©n√©ration
    console.log('\nüß™ Test de l\'endpoint de g√©n√©ration...');
    try {
      const testResponse = await fetch('http://localhost:3000/api/ai/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          prompt: 'Test de g√©n√©ration',
          duration: 30,
          style: 'pop'
        })
      });
      
      if (testResponse.ok) {
        const testData = await testResponse.json();
        console.log('‚úÖ Endpoint de g√©n√©ration fonctionne !');
        console.log(`   üìä ID: ${testData.id}, URL: ${testData.audioUrl}`);
      } else {
        const errorData = await testResponse.json();
        console.log(`‚ö†Ô∏è Endpoint de g√©n√©ration: ${errorData.error}`);
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Application non lanc√©e ou endpoint non accessible');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  createAIGenerationsTable();
}

module.exports = { createAIGenerationsTable };
