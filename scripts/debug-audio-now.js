// Debug imm√©diat du service audio
console.log('üîß Debug imm√©diat du service audio...');

// Attendre que le service soit disponible
function waitForAudioService() {
  return new Promise((resolve) => {
    const checkService = () => {
      if (window.audioService) {
        console.log('‚úÖ Service audio trouv√©');
        resolve(window.audioService);
      } else {
        console.log('‚è≥ Attente du service audio...');
        setTimeout(checkService, 500);
      }
    };
    checkService();
  });
}

async function debugAudioNow() {
  try {
    console.log('üéµ D√©marrage du debug audio...');
    
    // Attendre le service
    const audioService = await waitForAudioService();
    
    // V√©rifier l'√©tat initial
    console.log('üìä √âtat initial:', {
      allTracksCount: audioService.allTracks?.length || 0,
      queueCount: audioService.queue?.length || 0,
      currentIndex: audioService.currentIndex,
      isPlaying: audioService.state?.isPlaying
    });
    
    // Si pas de pistes, les charger
    if (!audioService.allTracks || audioService.allTracks.length === 0) {
      console.log('üìö Chargement des pistes...');
      
      if (audioService.actions?.loadAllTracks) {
        await audioService.actions.loadAllTracks();
        
        // Attendre un peu et v√©rifier
        setTimeout(() => {
          console.log('üìä Apr√®s chargement:', {
            allTracksCount: audioService.allTracks?.length || 0,
            firstTrack: audioService.allTracks?.[0]?.title || 'Aucune'
          });
          
          // Tester la navigation si des pistes sont disponibles
          if (audioService.allTracks && audioService.allTracks.length > 0) {
            console.log('üß™ Test de navigation...');
            
            if (audioService.actions?.nextTrack) {
              console.log('‚ñ∂Ô∏è Test nextTrack...');
              audioService.actions.nextTrack();
            }
            
            if (audioService.actions?.previousTrack) {
              console.log('‚èÆÔ∏è Test previousTrack...');
              audioService.actions.previousTrack();
            }
          }
        }, 2000);
      }
    } else {
      console.log('‚úÖ Pistes d√©j√† charg√©es, test navigation...');
      
      if (audioService.actions?.nextTrack) {
        console.log('‚ñ∂Ô∏è Test nextTrack...');
        audioService.actions.nextTrack();
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur debug:', error);
  }
}

// Exposer la fonction
window.debugAudioNow = debugAudioNow;

// Auto-ex√©cution
debugAudioNow();

console.log('üîß Script de debug charg√©');
console.log('üìù Utilisez debugAudioNow() pour relancer le debug'); 