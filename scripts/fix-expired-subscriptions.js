const mongoose = require('mongoose');
require('dotenv').config();

// Mod√®les
const UserSubscription = require('../models/UserSubscription');

async function fixExpiredSubscriptions() {
  try {
    console.log('üîß D√©but du nettoyage des abonnements expir√©s...');
    
    // Connexion √† la base de donn√©es
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connexion √† MongoDB √©tablie');
    
    // Trouver tous les abonnements avec statut 'active' ou 'trial' mais expir√©s
    const now = new Date();
    
    // Abonnements actifs expir√©s
    const expiredActiveSubscriptions = await UserSubscription.find({
      status: 'active',
      currentPeriodEnd: { $lt: now }
    });
    
    // Essais gratuits expir√©s
    const expiredTrialSubscriptions = await UserSubscription.find({
      status: 'trial',
      trialEnd: { $lt: now }
    });
    
    const expiredSubscriptions = [...expiredActiveSubscriptions, ...expiredTrialSubscriptions];
    
    console.log(`üìä ${expiredSubscriptions.length} abonnements expir√©s trouv√©s`);
    console.log(`   - ${expiredActiveSubscriptions.length} abonnements actifs expir√©s`);
    console.log(`   - ${expiredTrialSubscriptions.length} essais gratuits expir√©s`);
    
    if (expiredSubscriptions.length === 0) {
      console.log('‚úÖ Aucun abonnement expir√© √† corriger');
      return;
    }
    
    // Mettre √† jour le statut de tous les abonnements actifs expir√©s
    const updateActiveResult = await UserSubscription.updateMany(
      {
        status: 'active',
        currentPeriodEnd: { $lt: now }
      },
      {
        $set: { status: 'expired' }
      }
    );
    
    // Mettre √† jour le statut de tous les essais gratuits expir√©s
    const updateTrialResult = await UserSubscription.updateMany(
      {
        status: 'trial',
        trialEnd: { $lt: now }
      },
      {
        $set: { status: 'expired' }
      }
    );
    
    console.log(`‚úÖ ${updateActiveResult.modifiedCount} abonnements actifs mis √† jour avec le statut 'expired'`);
    console.log(`‚úÖ ${updateTrialResult.modifiedCount} essais gratuits mis √† jour avec le statut 'expired'`);
    
    // Afficher les d√©tails des abonnements corrig√©s
    for (const sub of expiredSubscriptions) {
      console.log(`üìã Abonnement ${sub._id}:`);
      console.log(`   - Utilisateur: ${sub.user}`);
      console.log(`   - Ancien statut: ${sub.status}`);
      console.log(`   - Date d'expiration: ${sub.currentPeriodEnd}`);
      console.log(`   - Nouveau statut: expired`);
      console.log('');
    }
    
    console.log('üéâ Nettoyage termin√© avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion √† MongoDB ferm√©e');
  }
}

// Ex√©cuter le script
fixExpiredSubscriptions(); 