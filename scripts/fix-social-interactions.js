const mongoose = require('mongoose');
require('dotenv').config();

// Mod√®les
const User = require('../models/User').default;
const Track = require('../models/Track').default;
const Comment = require('../models/Comment').default;

async function fixSocialInteractions() {
  try {
    // Connexion √† la base de donn√©es
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // 1. V√©rifier et corriger les utilisateurs
    console.log('\nüîç V√©rification des utilisateurs...');
    const users = await User.find({});
    console.log(`üìä ${users.length} utilisateurs trouv√©s`);

    for (const user of users) {
      // S'assurer que les propri√©t√©s existent
      if (!user.followers) user.followers = [];
      if (!user.following) user.following = [];
      if (!user.tracks) user.tracks = [];
      if (!user.playlists) user.playlists = [];
      if (!user.likes) user.likes = [];
      if (typeof user.isVerified === 'undefined') user.isVerified = false;
      if (typeof user.isArtist === 'undefined') user.isArtist = false;
      if (!user.totalPlays) user.totalPlays = 0;
      if (!user.totalLikes) user.totalLikes = 0;

      await user.save();
    }
    console.log('‚úÖ Utilisateurs corrig√©s');

    // 2. V√©rifier et corriger les pistes
    console.log('\nüîç V√©rification des pistes...');
    const tracks = await Track.find({});
    console.log(`üìä ${tracks.length} pistes trouv√©es`);

    for (const track of tracks) {
      // S'assurer que les propri√©t√©s existent
      if (!track.likes) track.likes = [];
      if (!track.comments) track.comments = [];
      if (!track.plays) track.plays = 0;
      if (!track.genre) track.genre = [];

      await track.save();
    }
    console.log('‚úÖ Pistes corrig√©es');

    // 3. V√©rifier et corriger les commentaires
    console.log('\nüîç V√©rification des commentaires...');
    const comments = await Comment.find({});
    console.log(`üìä ${comments.length} commentaires trouv√©s`);

    for (const comment of comments) {
      // S'assurer que les propri√©t√©s existent
      if (!comment.likes) comment.likes = [];
      if (!comment.replies) comment.replies = [];

      await comment.save();
    }
    console.log('‚úÖ Commentaires corrig√©s');

    // 4. Mettre √† jour les statistiques des utilisateurs
    console.log('\nüìà Mise √† jour des statistiques...');
    for (const user of users) {
      // Calculer les statistiques r√©elles
      const userTracks = await Track.find({ artist: user._id });
      const totalPlays = userTracks.reduce((sum, track) => sum + (track.plays || 0), 0);
      const totalLikes = userTracks.reduce((sum, track) => sum + (track.likes?.length || 0), 0);

      user.totalPlays = totalPlays;
      user.totalLikes = totalLikes;
      user.tracks = userTracks.map(track => track._id);

      await user.save();
    }
    console.log('‚úÖ Statistiques mises √† jour');

    // 5. Cr√©er quelques utilisateurs de test avec badges
    console.log('\nüß™ Cr√©ation d\'utilisateurs de test...');
    
    const testUsers = [
      {
        name: 'DJ Verified',
        email: 'dj.verified@test.com',
        username: 'djverified',
        password: 'password123',
        isVerified: true,
        isArtist: true,
        artistName: 'DJ Verified',
        bio: 'Artiste v√©rifi√© avec badge officiel',
        totalPlays: 15000,
        totalLikes: 2500
      },
      {
        name: 'Artist Pro',
        email: 'artist.pro@test.com',
        username: 'artistpro',
        password: 'password123',
        isVerified: true,
        isArtist: true,
        artistName: 'Artist Pro',
        bio: 'Artiste professionnel v√©rifi√©',
        totalPlays: 25000,
        totalLikes: 5000
      },
      {
        name: 'Music Lover',
        email: 'music.lover@test.com',
        username: 'musiclover',
        password: 'password123',
        isVerified: false,
        isArtist: false,
        bio: 'Passionn√© de musique',
        totalPlays: 5000,
        totalLikes: 800
      }
    ];

    for (const testUser of testUsers) {
      const existingUser = await User.findOne({ email: testUser.email });
      if (!existingUser) {
        const newUser = new User(testUser);
        await newUser.save();
        console.log(`‚úÖ Utilisateur de test cr√©√©: ${testUser.username}`);
      } else {
        console.log(`‚ö†Ô∏è Utilisateur de test existe d√©j√†: ${testUser.username}`);
      }
    }

    // 6. Cr√©er quelques pistes de test avec likes
    console.log('\nüéµ Cr√©ation de pistes de test...');
    
    const testTracks = [
      {
        title: 'Test Track 1',
        artist: users[0]?._id || testUsers[0]._id,
        audioUrl: 'https://example.com/audio1.mp3',
        coverUrl: '/default-cover.jpg',
        duration: 180,
        genre: ['Electronic', 'House'],
        likes: [],
        comments: [],
        plays: 150
      },
      {
        title: 'Test Track 2',
        artist: users[0]?._id || testUsers[0]._id,
        audioUrl: 'https://example.com/audio2.mp3',
        coverUrl: '/default-cover.jpg',
        duration: 240,
        genre: ['Pop', 'Dance'],
        likes: [],
        comments: [],
        plays: 300
      }
    ];

    for (const testTrack of testTracks) {
      const existingTrack = await Track.findOne({ title: testTrack.title });
      if (!existingTrack) {
        const newTrack = new Track(testTrack);
        await newTrack.save();
        console.log(`‚úÖ Piste de test cr√©√©e: ${testTrack.title}`);
      } else {
        console.log(`‚ö†Ô∏è Piste de test existe d√©j√†: ${testTrack.title}`);
      }
    }

    console.log('\nüéâ Script termin√© avec succ√®s !');
    console.log('\nüìã R√©sum√© des corrections :');
    console.log('- ‚úÖ Utilisateurs corrig√©s');
    console.log('- ‚úÖ Pistes corrig√©es');
    console.log('- ‚úÖ Commentaires corrig√©s');
    console.log('- ‚úÖ Statistiques mises √† jour');
    console.log('- ‚úÖ Utilisateurs de test cr√©√©s');
    console.log('- ‚úÖ Pistes de test cr√©√©es');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le script
fixSocialInteractions(); 