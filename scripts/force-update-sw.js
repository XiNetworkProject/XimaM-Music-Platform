// Script pour forcer la mise √† jour du service worker
console.log('üîß For√ßage de la mise √† jour du service worker...');

// Fonction pour nettoyer tous les caches
async function clearAllCaches() {
  try {
    const cacheNames = await caches.keys();
    console.log('üìã Caches trouv√©s:', cacheNames);
    
    await Promise.all(
      cacheNames.map(cacheName => {
        console.log('üóëÔ∏è Suppression du cache:', cacheName);
        return caches.delete(cacheName);
      })
    );
    
    console.log('‚úÖ Tous les caches ont √©t√© supprim√©s');
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des caches:', error);
  }
}

// Fonction pour forcer la mise √† jour du service worker
async function forceUpdateServiceWorker() {
  try {
    if ('serviceWorker' in navigator) {
      console.log('üîÑ D√©senregistrement du service worker actuel...');
      
      // D√©senregistrer tous les service workers
      const registrations = await navigator.serviceWorker.getRegistrations();
      await Promise.all(
        registrations.map(registration => registration.unregister())
      );
      
      console.log('‚úÖ Service workers d√©senregistr√©s');
      
      // Attendre un peu
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // R√©enregistrer le service worker
      console.log('üîÑ R√©enregistrement du service worker...');
      const registration = await navigator.serviceWorker.register('/sw.js', {
        updateViaCache: 'none'
      });
      
      console.log('‚úÖ Service worker r√©enregistr√©:', registration);
      
      // Forcer l'activation
      if (registration.waiting) {
        registration.waiting.postMessage({ type: 'SKIP_WAITING' });
      }
      
      // Attendre l'activation
      await new Promise(resolve => {
        if (registration.active) {
          resolve();
        } else {
          registration.addEventListener('activate', resolve, { once: true });
        }
      });
      
      console.log('‚úÖ Service worker activ√©');
      
      // Nettoyer les caches apr√®s l'activation
      await clearAllCaches();
      
      console.log('üéâ Mise √† jour termin√©e avec succ√®s !');
      
      // Recharger la page pour appliquer les changements
      setTimeout(() => {
        console.log('üîÑ Rechargement de la page...');
        window.location.reload();
      }, 2000);
      
    } else {
      console.log('‚ùå Service Worker non support√©');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error);
  }
}

// Fonction pour v√©rifier l'√©tat des notifications
async function checkNotificationStatus() {
  console.log('üîç V√©rification du statut des notifications...');
  
  if (!('Notification' in window)) {
    console.log('‚ùå Notifications non support√©es');
    return;
  }
  
  console.log('üì± Permission actuelle:', Notification.permission);
  
  if (Notification.permission === 'granted') {
    console.log('‚úÖ Notifications autoris√©es');
    
    // Tester l'affichage d'une notification
    try {
      const testNotification = new Notification('Test XimaM', {
        body: 'Test de notification',
        icon: '/android-chrome-192x192.png',
        tag: 'test'
      });
      
      setTimeout(() => {
        testNotification.close();
        console.log('‚úÖ Test de notification r√©ussi');
      }, 3000);
      
    } catch (error) {
      console.error('‚ùå Erreur test notification:', error);
    }
  } else {
    console.log('‚ö†Ô∏è Notifications non autoris√©es');
  }
}

// Fonction pour v√©rifier l'√©tat du service worker
async function checkServiceWorkerStatus() {
  console.log('üîç V√©rification du statut du service worker...');
  
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.getRegistration();
    
    if (registration) {
      console.log('‚úÖ Service worker enregistr√©');
      console.log('üìã √âtat:', registration.active ? 'Actif' : 'Inactif');
      console.log('üîÑ En attente:', registration.waiting ? 'Oui' : 'Non');
      console.log('üì¶ Installation:', registration.installing ? 'En cours' : 'Termin√©e');
    } else {
      console.log('‚ùå Aucun service worker enregistr√©');
    }
  } else {
    console.log('‚ùå Service Worker non support√©');
  }
}

// Ex√©cuter les v√©rifications et la mise √† jour
async function main() {
  console.log('üöÄ D√©marrage du script de mise √† jour...');
  
  // V√©rifications initiales
  await checkServiceWorkerStatus();
  await checkNotificationStatus();
  
  // Demander confirmation
  const shouldUpdate = confirm(
    'Voulez-vous forcer la mise √† jour du service worker et nettoyer le cache ?\n\n' +
    'Cela va :\n' +
    '‚Ä¢ D√©senregistrer le service worker actuel\n' +
    '‚Ä¢ Nettoyer tous les caches\n' +
    '‚Ä¢ R√©enregistrer le service worker\n' +
    '‚Ä¢ Recharger la page'
  );
  
  if (shouldUpdate) {
    await forceUpdateServiceWorker();
  } else {
    console.log('‚ùå Mise √† jour annul√©e par l\'utilisateur');
  }
}

// Exposer les fonctions globalement pour utilisation dans la console
window.forceUpdateSW = {
  clearAllCaches,
  forceUpdateServiceWorker,
  checkNotificationStatus,
  checkServiceWorkerStatus,
  main
};

// Ex√©cuter automatiquement si le script est charg√© directement
if (typeof window !== 'undefined') {
  main();
} 