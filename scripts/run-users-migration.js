const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function runUsersMigration() {
  console.log('üöÄ Migration de la table users...\n');

  try {
    // Lire le fichier SQL
    const sqlPath = path.join(__dirname, 'create_users_table.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');

    console.log('üìÑ Ex√©cution du script SQL...');

    // Ex√©cuter le script SQL
    const { data, error } = await supabase.rpc('exec_sql', { sql: sqlContent });

    if (error) {
      console.log('‚ö†Ô∏è M√©thode exec_sql non disponible, tentative avec query directe...');
      
      // Fallback : ex√©cuter les commandes une par une
      const commands = sqlContent.split(';').filter(cmd => cmd.trim());
      
      for (const command of commands) {
        if (command.trim()) {
          try {
            const { error: cmdError } = await supabase.rpc('exec_sql', { sql: command });
            if (cmdError) {
              console.log(`‚ö†Ô∏è Commande ignor√©e: ${command.substring(0, 50)}...`);
            }
          } catch (e) {
            console.log(`‚ö†Ô∏è Commande ignor√©e: ${command.substring(0, 50)}...`);
          }
        }
      }
    } else {
      console.log('‚úÖ Script SQL ex√©cut√© avec succ√®s');
    }

    // V√©rifier que la table existe maintenant
    console.log('\nüîç V√©rification de la table users...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, subscription_plan')
      .limit(5);

    if (usersError) {
      console.error('‚ùå Erreur lors de la v√©rification:', usersError);
      return;
    }

    console.log(`‚úÖ Table users cr√©√©e avec succ√®s !`);
    console.log(`üìä ${users.length} utilisateurs synchronis√©s:`);
    users.forEach(user => {
      console.log(`   - ${user.email} (Plan: ${user.subscription_plan})`);
    });

    // Test de l'endpoint quota
    console.log('\nüß™ Test de l\'endpoint quota...');
    const testResponse = await fetch('http://localhost:3000/api/ai/test');
    if (testResponse.ok) {
      const testData = await testResponse.json();
      console.log('‚úÖ Endpoint test fonctionne:', testData.message);
    } else {
      console.log('‚ö†Ô∏è Endpoint test non accessible (normal si pas connect√©)');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  runUsersMigration();
}

module.exports = { runUsersMigration };
