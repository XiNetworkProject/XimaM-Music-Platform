const mongoose = require('mongoose');
require('dotenv').config();

// Mod√®le Track simplifi√© pour le test
const TrackSchema = new mongoose.Schema({
  title: String,
  artist: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  plays: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now }
});

const Track = mongoose.models.Track || mongoose.model('Track', TrackSchema);

async function testPlaysCounter() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Cr√©er une piste de test
    const testTrack = new Track({
      title: 'Test Track - Plays Counter',
      artist: new mongoose.Types.ObjectId(),
      plays: 0
    });

    await testTrack.save();
    console.log('‚úÖ Piste de test cr√©√©e:', testTrack._id);

    // Test 1: Incr√©menter les √©coutes
    console.log('\nüß™ Test 1: Incr√©mentation des √©coutes');
    console.log('√âcoutes initiales:', testTrack.plays);

    const response1 = await fetch(`http://localhost:3000/api/tracks/${testTrack._id}/plays`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    if (response1.ok) {
      const data1 = await response1.json();
      console.log('‚úÖ √âcoutes apr√®s incr√©mentation:', data1.plays);
    } else {
      console.log('‚ùå Erreur lors de l\'incr√©mentation');
    }

    // Test 2: R√©cup√©rer les √©coutes
    console.log('\nüß™ Test 2: R√©cup√©ration des √©coutes');
    const response2 = await fetch(`http://localhost:3000/api/tracks/${testTrack._id}/plays`);
    
    if (response2.ok) {
      const data2 = await response2.json();
      console.log('‚úÖ √âcoutes r√©cup√©r√©es:', data2.plays);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration');
    }

    // Test 3: V√©rifier en base de donn√©es
    console.log('\nüß™ Test 3: V√©rification en base de donn√©es');
    const updatedTrack = await Track.findById(testTrack._id);
    console.log('‚úÖ √âcoutes en base:', updatedTrack.plays);

    // Test 4: Test de d√©bounce (simuler plusieurs appels rapides)
    console.log('\nüß™ Test 4: Test de d√©bounce');
    const promises = [];
    for (let i = 0; i < 5; i++) {
      promises.push(
        fetch(`http://localhost:3000/api/tracks/${testTrack._id}/plays`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        })
      );
    }

    const responses = await Promise.all(promises);
    const successfulResponses = responses.filter(r => r.ok);
    console.log(`‚úÖ ${successfulResponses.length}/5 appels r√©ussis (d√©bounce actif)`);

    // Nettoyer
    await Track.findByIdAndDelete(testTrack._id);
    console.log('\nüßπ Piste de test supprim√©e');

    console.log('\n‚úÖ Tous les tests termin√©s avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testPlaysCounter();
}

module.exports = { testPlaysCounter }; 