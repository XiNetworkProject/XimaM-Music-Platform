// scripts/test-suno-integration.js
require('dotenv').config({ path: '.env.local' });

const SUNO_API_KEY = process.env.SUNO_API_KEY;
const SUNO_API_BASE = process.env.SUNO_API_BASE || 'https://api.sunoapi.org';

async function testSunoIntegration() {
  try {
    console.log('üéµ Test d\'int√©gration Suno complet...');
    console.log('üîë Cl√© API:', SUNO_API_KEY ? '‚úÖ Pr√©sente' : '‚ùå Manquante');
    console.log('üåê Base URL:', SUNO_API_BASE);

    if (!SUNO_API_KEY) {
      console.error('‚ùå SUNO_API_KEY manquante dans .env.local');
      return;
    }

    // 1. Test de g√©n√©ration
    console.log('\nüöÄ Test de g√©n√©ration...');
    const generateResponse = await fetch(`${SUNO_API_BASE}/api/v1/generate`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUNO_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: 'une musique √©lectro fran√ßaise',
        model: 'V4_5PLUS',
        instrumental: false,
        customMode: false,
        duration: 30,
        callBackUrl: 'https://webhook.site/your-unique-url'
      }),
    });

    if (!generateResponse.ok) {
      const errorText = await generateResponse.text();
      console.error('‚ùå Erreur g√©n√©ration:', errorText);
      return;
    }

    const generateData = await generateResponse.json();
    console.log('üìä G√©n√©ration:', JSON.stringify(generateData, null, 2));
    
    const taskId = generateData.data?.taskId;
    if (!taskId) {
      console.error('‚ùå Task ID manquant');
      return;
    }

    console.log(`üÜî Task ID: ${taskId}`);

    // 2. Test de polling
    console.log('\nüîç Test de polling...');
    await new Promise(resolve => setTimeout(resolve, 5000)); // Attendre 5s

    const statusResponse = await fetch(`${SUNO_API_BASE}/api/v1/generate/record-info?taskId=${taskId}`, {
      headers: {
        'Authorization': `Bearer ${SUNO_API_KEY}`,
      },
    });

    console.log('üì° Status:', statusResponse.status, statusResponse.statusText);
    
    if (statusResponse.ok) {
      const statusData = await statusResponse.json();
      console.log('üìä Status:', JSON.stringify(statusData, null, 2));
      
      const status = statusData.data?.status;
      const tracks = statusData.data?.response?.sunoData || [];
      
      console.log(`üéµ Statut: ${status}`);
      console.log(`üéµ Tracks: ${tracks.length}`);
      
      if (tracks.length > 0) {
        tracks.forEach((track, i) => {
          console.log(`  ${i+1}. ${track.title || 'Sans titre'}`);
          console.log(`     Audio: ${track.audioUrl || track.audio_url || 'N/A'}`);
          console.log(`     Stream: ${track.streamAudioUrl || track.stream_audio_url || 'N/A'}`);
          console.log(`     Image: ${track.imageUrl || track.image_url || 'N/A'}`);
        });
      }
    } else {
      const errorText = await statusResponse.text();
      console.log('‚ùå Erreur status:', errorText);
    }

    console.log('\n‚úÖ Test d\'int√©gration termin√© !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Allez sur http://localhost:3000/ai-generator');
    console.log('2. Connectez-vous avec votre compte');
    console.log('3. G√©n√©rez une musique');
    console.log('4. Surveillez les logs de l\'app pour voir les webhooks');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

testSunoIntegration();
