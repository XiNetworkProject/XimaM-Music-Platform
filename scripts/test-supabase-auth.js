const { createClient } = require('@supabase/supabase-js');
const config = require('./migrate-config');

// Initialiser Supabase
const supabase = createClient(config.supabase.url, config.supabase.serviceKey);

async function testSupabaseAuth() {
  console.log('üß™ TEST AUTHENTIFICATION SUPABASE');
  console.log('==================================');
  
  try {
    // 1. Lister tous les utilisateurs dans Supabase Auth
    console.log('\n1Ô∏è‚É£ R√©cup√©ration des utilisateurs Supabase Auth...');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateurs Auth:', authError);
      return;
    }
    
    console.log(`‚úÖ ${authUsers.users.length} utilisateurs trouv√©s dans Supabase Auth`);
    
    // 2. Lister tous les profils dans la table profiles
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des profils utilisateurs...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*');
    
    if (profilesError) {
      console.error('‚ùå Erreur r√©cup√©ration profils:', profilesError);
      return;
    }
    
    console.log(`‚úÖ ${profiles.length} profils trouv√©s dans la table profiles`);
    
    // 3. V√©rifier la correspondance Auth ‚Üî Profiles
    console.log('\n3Ô∏è‚É£ V√©rification de la correspondance Auth ‚Üî Profiles...');
    const authUserIds = authUsers.users.map(u => u.id);
    const profileIds = profiles.map(p => p.id);
    
    const missingProfiles = authUserIds.filter(id => !profileIds.includes(id));
    const orphanProfiles = profileIds.filter(id => !authUserIds.includes(id));
    
    if (missingProfiles.length > 0) {
      console.log(`‚ö†Ô∏è ${missingProfiles.length} utilisateurs Auth sans profil:`, missingProfiles);
    }
    
    if (orphanProfiles.length > 0) {
      console.log(`‚ö†Ô∏è ${orphanProfiles.length} profils orphelins:`, orphanProfiles);
    }
    
    if (missingProfiles.length === 0 && orphanProfiles.length === 0) {
      console.log('‚úÖ Tous les utilisateurs Auth ont un profil correspondant');
    }
    
    // 4. Tester l'authentification avec un utilisateur existant
    console.log('\n4Ô∏è‚É£ Test d\'authentification...');
    if (authUsers.users.length > 0) {
      const testUser = authUsers.users[0];
      console.log(`üß™ Test avec l'utilisateur: ${testUser.email}`);
      
      // Note: On ne peut pas tester le mot de passe sans le conna√Ætre
      console.log('‚ÑπÔ∏è Test d\'authentification n√©cessite le mot de passe de l\'utilisateur');
      console.log('‚ÑπÔ∏è Utilisez l\'interface web pour tester la connexion');
    }
    
    // 5. Afficher les d√©tails des utilisateurs
    console.log('\n5Ô∏è‚É£ D√©tails des utilisateurs migr√©s:');
    authUsers.users.forEach((user, index) => {
      const profile = profiles.find(p => p.id === user.id);
      console.log(`\nüë§ Utilisateur ${index + 1}:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   Cr√©√©: ${user.created_at}`);
      console.log(`   Profil: ${profile ? '‚úÖ Cr√©√©' : '‚ùå Manquant'}`);
      if (profile) {
        console.log(`   Nom: ${profile.name || 'Non d√©fini'}`);
        console.log(`   Username: ${profile.username || 'Non d√©fini'}`);
        console.log(`   V√©rifi√©: ${profile.is_verified ? '‚úÖ Oui' : '‚ùå Non'}`);
        console.log(`   Artiste: ${profile.is_artist ? '‚úÖ Oui' : '‚ùå Non'}`);
      }
    });
    
    console.log('\nüéâ TEST AUTHENTIFICATION SUPABASE TERMIN√â !');
    console.log('===========================================');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Tester la connexion dans l\'interface web');
    console.log('2. V√©rifier que les sessions sont bien cr√©√©es');
    console.log('3. Tester l\'acc√®s aux donn√©es utilisateur');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Lancer le test
if (require.main === module) {
  testSupabaseAuth();
}
